generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String? // This is the NextAuth user image, distinct from page's profileImage
  accounts      Account[]
  sessions      Session[]
  pages         Page[] // User can have multiple pages
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// New Enum for Content Types
enum ContentType {
  TEXT
  LINK
  HEADER 
}

model Page {
  id              String    @id @default(cuid())
  userId          String
  slug            String    @unique
  title           String
  description     String?
  // profileImage    String? // Removed as per user request
  bannerImage     String?
  backgroundColor String?
  textColor       String?
  accentColor     String?
  fontFamily      String?
  aliases         String[]  @default([]) // For URL Aliases
  showWatermark   Boolean   @default(true)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  contentBlocks   ContentBlock[] // Replaces 'links'
  pageVisits      PageVisit[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

// New Unified ContentBlock Model
model ContentBlock {
  id          String      @id @default(cuid())
  pageId      String
  page        Page        @relation(fields: [pageId], references: [id], onDelete: Cascade)
  
  type        ContentType
  position    Int
  
  // Fields for LINK type
  title       String?     // Also usable for TEXT block header
  url         String?
  icon        String?     // For custom link icons
  clicks      Int         @default(0) // For LINK type

  // Field for TEXT type
  textContent String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([pageId, position])
}

// Removed old Link model
// model Link {
//   id        String   @id @default(cuid())
//   pageId    String
//   page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
//   title     String
//   url       String
//   position  Int
//   clicks    Int      @default(0)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   @@index([pageId])
// }

model PageVisit {
  id         String   @id @default(cuid())
  pageId     String
  page       Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  timestamp  DateTime @default(now())
  ip         String?
  userAgent  String?
  referrer   String?
  country    String?
  city       String?
  userId     String? // Optional: if the visitor is a logged-in user

  @@index([pageId])
  @@index([timestamp])
} 